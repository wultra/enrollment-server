/*
 * PowerAuth Enrollment Server
 * Copyright (C) 2023 Wultra s.r.o.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.wultra.app.onboardingserver.common.database.entity;

import jakarta.persistence.*;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

import java.io.Serial;
import java.io.Serializable;
import java.util.Date;

/**
 * SCA (Strong Customer Authentication) consists of presence check and OTP verification.
 * This entity stores particular and also aggregated results.
 * One SCA attempt is represented by a single entry.
 *
 * @author Lubos Racansky, lubos.racansky@wultra.com
 */
@Getter
@Setter
@Entity
@Table(name = "es_sca_result")
@ToString
@EqualsAndHashCode(of = "id")
public class ScaResultEntity implements Serializable {

    @Serial
    private static final long serialVersionUID = 1L;

    /**
     * Autogenerated identifier
     */
    @Id
    @SequenceGenerator(name = "es_sca_result", sequenceName = "es_sca_result_seq")
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "es_sca_result")
    private Long id;

    /**
     * Identifier of the related identity verification entity.
     */
    @ManyToOne
    @JoinColumn(name = "identity_verification_id", referencedColumnName = "id", nullable = false)
    private IdentityVerificationEntity identityVerification;

    @Column(name = "process_id", nullable = false)
    private String processId;

    /**
     * Result of presence check.
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "presence_check_result")
    private Result presenceCheckResult;

    /**
     * Result of the last OTP verification.
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "otp_verification_result")
    private Result otpVerificationResult;

    /**
     * Aggregated result of {@link #presenceCheckResult} and {@link #otpVerificationResult}.
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "sca_result")
    private Result scaResult;

    /**
     * Timestamp when the entity was created.
     */
    @Column(name = "timestamp_created", nullable = false)
    private Date timestampCreated;

    /**
     * Timestamp when the entity was last updated.
     */
    @Column(name = "timestamp_last_updated")
    private Date timestampLastUpdated;

    public enum Result {
        SUCCESS,
        FAILED
    }

}
